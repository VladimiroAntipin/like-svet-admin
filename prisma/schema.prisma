// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//
// ---- MODELLI ----
//
model Admin {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  email         String   @unique
  password      String
  tokenVersion  Int      @default(0)
  stores        Store[]  @relation("AdminToStore")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Store {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  userId          String          @db.ObjectId // riferimento a Admin.id
  admin           Admin           @relation("AdminToStore", fields: [userId], references: [id])
  billboards      Billboard[]     @relation("StoreToBillboard")
  categories      Category[]      @relation("StoreToCategory")
  sizes           Size[]          @relation("StoreToSize")
  colors          Color[]         @relation("StoreToColor")
  product         Product[]       @relation("StoreToProduct")
  reviews         Review[]        @relation("StoreToReview")
  orders          Order[]         @relation("StoreToOrder")
  giftCodes       GiftCode[]      @relation("StoreToGiftCode")
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Billboard {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  storeId         String          @db.ObjectId
  store           Store           @relation("StoreToBillboard", fields: [storeId], references: [id])
  label           String
  imageUrl        String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([storeId])
}

model Review {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  storeId         String          @db.ObjectId
  store           Store           @relation("StoreToReview", fields: [storeId], references: [id])
  label           String
  imageUrl        String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([storeId])
}

model Category {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  storeId         String          @db.ObjectId
  store           Store           @relation("StoreToCategory", fields: [storeId], references: [id])
  products        Product[]       @relation("CategoryToProduct")
  name            String
  imageUrl        String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([storeId])
}

model Size {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  storeId         String          @db.ObjectId
  store           Store           @relation("StoreToSize", fields: [storeId], references: [id])
  name            String
  value           String
  productSizes    ProductSize[]   
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([storeId])
}

model Color {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  storeId         String          @db.ObjectId
  store           Store           @relation("StoreToColor", fields: [storeId], references: [id])
  name            String
  value           String
  productColors   ProductColor[]   
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([storeId])
}

model Product {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  storeId         String          @db.ObjectId
  store           Store           @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId      String          @db.ObjectId
  category        Category        @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name            String
  price           Int?
  isFeatured      Boolean         @default(false)
  isArchived      Boolean         @default(false)
  isGiftCard      Boolean         @default(false)
  giftPrices      GiftCardPrice[]
  images          Image[]
  orderItem       OrderItem[]
  productSizes    ProductSize[]   
  productColors   ProductColor[]
  favorites       Favorite[]      
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([storeId])
  @@index([categoryId])
}

model GiftCardPrice {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  value     Int      // prezzo in centesimi (es. 1000 = 10â‚¬)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Image {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  productId       String          @db.ObjectId
  product         Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  url             String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([productId])
}

model Order {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  storeId         String          @db.ObjectId
  store           Store           @relation("StoreToOrder", fields: [storeId], references: [id])
  customerId      String?         @db.ObjectId
  customer        Customer?       @relation(fields: [customerId], references: [id])
  orderItems      OrderItem[]
  region          String
  address         String
  apartment       String?
  floor           String?
  entrance        String?
  extraInfo       String?
  shippingMethod  String
  totalPrice      Int
  usedBalance     Int?            @default(0)
  isPaid          Boolean         @default(false)
  phone           String          @default("")
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([storeId])
  @@index([customerId])
}

model OrderItem {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  orderId           String          @db.ObjectId
  order             Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId         String          @db.ObjectId
  sizeId            String?         @db.ObjectId
  colorId           String?         @db.ObjectId
  giftCardAmount    Int? 
  giftCodeId        String?         @db.ObjectId
  giftCodePurchases  GiftCodePurchase[]
  product           Product         @relation(fields: [productId],  references: [id])

  @@index([orderId])
  @@index([productId])
}

model ProductSize {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  productId       String          @db.ObjectId
  sizeId          String          @db.ObjectId
  product         Product         @relation(fields: [productId], references: [id])
  size            Size            @relation(fields: [sizeId], references: [id])

  @@index([productId])
  @@index([sizeId])
}

model ProductColor {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  productId       String          @db.ObjectId
  colorId         String          @db.ObjectId
  product         Product         @relation(fields: [productId], references: [id])
  color           Color           @relation(fields: [colorId], references: [id])

  @@index([productId])
  @@index([colorId])
}

//
// ---- CLIENTI ----
//

model Customer {
  id            String              @id @default(auto()) @map("_id") @db.ObjectId
  storeId       String              @db.ObjectId
  firstName     String
  lastName      String
  birthDate     DateTime
  profileImage  String?
  email         String              @unique
  phone         String?             @unique
  password      String
  balance       Int                 @default(0)  
  favorites     Favorite[]
  orders        Order[]     
  giftCodes     GiftCodeRedemption[]
  purchases     GiftCodePurchase[] 
  refreshToken  String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
}

model Favorite {
  id          String                @id @default(auto()) @map("_id") @db.ObjectId
  customerId  String                @db.ObjectId
  productId   String                @db.ObjectId
  customer    Customer              @relation(fields: [customerId], references: [id])
  product     Product               @relation(fields: [productId], references: [id])

  @@unique([customerId, productId]) 
}

model GiftCode {
  id          String                @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String                @db.ObjectId
  store       Store                 @relation("StoreToGiftCode", fields: [storeId], references: [id])
  code        String                @unique              
  amount      Int                           
  isActive    Boolean               @default(true)
  createdAt   DateTime              @default(now())
  expiresAt   DateTime?             
  redemption  GiftCodeRedemption?  
  purchases   GiftCodePurchase[]  
}

model GiftCodeRedemption {
  id           String               @id @default(auto()) @map("_id") @db.ObjectId
  customerId   String               @db.ObjectId
  giftCodeId   String               @unique @db.ObjectId
  redeemedAt   DateTime             @default(now())
  customer     Customer             @relation(fields: [customerId], references: [id])
  giftCode     GiftCode             @relation(fields: [giftCodeId], references: [id], onDelete: Cascade)
}

model GiftCodePurchase {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  giftCodeId  String     @db.ObjectId
  customerId  String     @db.ObjectId
  orderItemId String?    @db.ObjectId
  purchasedAt DateTime   @default(now())
  giftCode    GiftCode   @relation(fields: [giftCodeId], references: [id])
  customer    Customer   @relation(fields: [customerId], references: [id])
  orderItem   OrderItem?  @relation(fields: [orderItemId], references: [id])

  @@index([giftCodeId])
  @@index([customerId])
}